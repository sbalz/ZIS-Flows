{
    "zis_template_version":"2019-10-14",
    "name":"AWS ZIS ticket.TicketCreated",
    "description":"Listens to ZIS event 'ticket.TicketCreated' and starts an Amazon States Language workflow und can contain conditional branches, data transformations and API calls.",
    "resources":{
      "JobSpec":{
        "type":"ZIS::JobSpec",
        "properties":{
          "name":"TicketCreatedJobSpec",
          "event_source":"support",
          "event_type":"ticket.TicketCreated",
          "flow_name":"zis:{{ticket_created}}:flow:TicketCreatedFlow"
        }
      },
      "Flow":{
        "type":"ZIS::Flow",
        "properties":{
          "name":"TicketCreatedFlow",
          "definition":{
            "StartAt":"pass.GlobalVariable",
            "States":{
              "pass.GlobalVariable":{
                "Type":"Pass",
                "Result":{
                  "ticket_id.$":"$.input.ticket_event.ticket.id",
                  "requester_id.$":"$.input.ticket_event.ticket.requester_id"
                },
                "Next":"action.CheckSkipZISTag"
              },
              "action.CheckSkipZISTag":{
                "Type":"Action",
                "ActionName":"zis:common:transform:Jq",
                "Comment":"Check if Ticket tags contain 'skip_ticket_created_zis'",
                "Parameters":{
                  "expr":"[.input.ticket_event.ticket.tags[] == \"skip_ticket_created_zis\"] | unique | if index(true)>-1 then true else false end",
                  "data.$":"$"
                },
                "ResultPath":"$.SkipJobTagResult",
                "Next":"choice.CheckSkipZISTagResult",
                "Catch":[
                  {
                    "ErrorEquals":[
                      "States.ALL"
                    ],
                    "ResultPath":"$.error_Details",
                    "Next":"action.PostError"
                  }
                ]
              },
              "choice.CheckSkipZISTagResult":{
                "Type":"Choice",
                "Comment":"Decision to execute or to skip this ZIS Flow.",
                "Choices":[
                  {
                    "Variable":"$.SkipJobTagResult",
                    "BooleanEquals":true,
                    "Next":"succeed.SkipZIS"
                  }
                ],
                "Default":"wait.OneSecond1"
              },
              "succeed.SkipZIS":{
                "Type":"Succeed",
                "Comment":"Log",
                "Message":"✅ - Ticket ID: {{$.input.ticket_event.ticket.id}}; The workflow was skipped."
              },
              "wait.OneSecond1":{
                "Type":"Wait",
                "Seconds":1,
                "Comment":"Wait 1 Second before executing the next Action.",
                "Next":"action.CheckDeletionTag"
              },
              "action.CheckDeletionTag":{
                "Type":"Action",
                "ActionName":"zis:common:transform:Jq",
                "Comment":"Check if Ticket tags contain 'is_api_deleted'",
                "Parameters":{
                  "expr":"[.input.ticket_event.ticket.tags[] == \"is_api_deleted\"] | unique | if index(true)>-1 then true else false end",
                  "data.$":"$"
                },
                "ResultPath":"$.DeletionTagResult",
                "Next":"choice.CheckDeletionTagResult",
                "Catch":[
                  {
                    "ErrorEquals":[
                      "States.ALL"
                    ],
                    "ResultPath":"$.error_Details",
                    "Next":"action.PostError"
                  }
                ]
              },
              "choice.CheckDeletionTagResult":{
                "Type":"Choice",
                "Comment":"Decision to execute 'Delete Ticket' job or to skip it.",
                "Choices":[
                  {
                    "Variable":"$.DeletionTagResult",
                    "BooleanEquals":true,
                    "Next":"action.DeleteTicket"
                  }
                ],
                "Default":"wait.OneSecond2"
              },
              "action.DeleteTicket":{
                "Type":"Action",
                "ActionName":"zis:{{ticket_created}}:action:delete_ticket",
                "Comment":"Delete Ticket.",
                "Parameters":{
                  "ticket_id.$":"$.input.ticket_event.ticket.id"
                },
                "Next":"succeed.DeleteTicket",
                "Catch":[
                  {
                    "ErrorEquals":[
                      "States.ALL"
                    ],
                    "ResultPath":"$.error_Details",
                    "Next":"action.PostError"
                  }
                ]
              },
              "succeed.DeleteTicket":{
                "Type":"Succeed",
                "Comment":"Log",
                "Message":"✅ - Ticket ID: {{$.input.ticket_event.ticket.id}}; The ticket was identified as superfluous and therefore deleted."
              },
              "wait.OneSecond2":{
                "Type":"Wait",
                "Seconds":1,
                "Comment":"Wait 1 Second before executing the next Action.",
                "Next":"action.ShowUser"
              },
              "action.ShowUser":{
                "Type":"Action",
                "ActionName":"zis:{{ticket_created}}:action:show_user",
                "Comment":"Get Ticket Requester ID.",
                "Parameters":{
                  "requester_id.$":"$.input.ticket_event.ticket.requester_id"
                },
                "ResultPath":"$.fetched_requester",
                "Next":"action.CheckRequesterEmail",
                "Catch":[
                  {
                    "ErrorEquals":[
                      "States.ALL"
                    ],
                    "ResultPath":"$.error_Details",
                    "Next":"action.PostError"
                  }
                ]
              },
              "action.CheckRequesterEmail":{
                "Type":"Action",
                "ActionName":"zis:common:transform:Jq",
                "Comment":"Check if the Requester's Email contains a Domain defined as Spam.",
                "Parameters":{
                  "expr": "if .user.email == null then false else [.user.email | contains(\"@qq.com\", \"@bccto.cc\", \"@126.com\", \"@tbol.com\", \"@example.com\")] | unique | if index(true) > -1 then true else false end end",
                  "data.$":"$.fetched_requester"
                },
                "ResultPath":"$.SpamRequesterMailPresent",
                "Next":"choice.CheckRequesterEmailResult",
                "Catch":[
                  {
                    "ErrorEquals":[
                      "States.ALL"
                    ],
                    "ResultPath":"$.error_Details",
                    "Next":"action.PostError"
                  }
                ]
              },
              "choice.CheckRequesterEmailResult":{
                "Type":"Choice",
                "Comment":"Decision to execute 'Mark as Spam' job or to skip it.",
                "Choices":[
                  {
                    "Variable":"$.SpamRequesterMailPresent",
                    "BooleanEquals":true,
                    "Next":"action.MarkAsSpam"
                  }
                ],
                "Default":"action.CheckDelayTag"
              },
              "action.MarkAsSpam":{
                "Type":"Action",
                "ActionName":"zis:{{ticket_created}}:action:mark_as_spam",
                "Comment":"Mark Ticket as Spam and Suspend Requester.",
                "Parameters":{
                  "ticket_id.$":"$.input.ticket_event.ticket.id"
                },
                "Next":"wait.TenSeconds1",
                "Catch":[
                  {
                    "ErrorEquals":[
                      "States.ALL"
                    ],
                    "ResultPath":"$.error_Details",
                    "Next":"action.PostError"
                  }
                ]
              },
              "wait.TenSeconds1":{
                "Type":"Wait",
                "Seconds":10,
                "Comment":"Wait 10 Seconds before executing the next Action.",
                "Next":"action.DeleteUser"
              },
              "action.DeleteUser":{
                "Type":"Action",
                "ActionName":"zis:{{ticket_created}}:action:delete_user",
                "Comment":"Delete Requester.",
                "Parameters":{
                  "requester_id.$":"$.input.ticket_event.ticket.requester_id"
                },
                "Next":"wait.TwentySeconds1",
                "Catch":[
                  {
                    "ErrorEquals":[
                      "States.ALL"
                    ],
                    "ResultPath":"$.error_Details",
                    "Next":"action.PostError"
                  }
                ]
              },
              "wait.TwentySeconds1":{
                "Type":"Wait",
                "Seconds":20,
                "Comment":"Wait 20 Seconds before executing the next Action.",
                "Next":"action.PermanentDeleteUser"
              },
              "action.PermanentDeleteUser":{
                "Type":"Action",
                "ActionName":"zis:{{ticket_created}}:action:permanent_delete_user",
                "Comment":"Permanent delete Requester.",
                "Parameters":{
                  "requester_id.$":"$.input.ticket_event.ticket.requester_id"
                },
                "Next":"succeed.MarkedAsSpam",
                "Catch":[
                  {
                    "ErrorEquals":[
                      "States.ALL"
                    ],
                    "ResultPath":"$.error_Details",
                    "Next":"action.PostError"
                  }
                ]
              },
              "succeed.MarkedAsSpam":{
                "Type":"Succeed",
                "Comment":"Log",
                "Message":"✅ - Ticket ID: {{$.input.ticket_event.ticket.id}}; The ticket has been identified and marked as spam. The requester has been permanently deleted."
              },
              "action.CheckDelayTag":{
                "Type":"Action",
                "ActionName":"zis:common:transform:Jq",
                "Comment":"Check if Ticket tags contain 'zis_webhook_delay_selection'",
                "Parameters":{
                  "expr":"[.input.ticket_event.ticket.tags[] == \"zis_webhook_delay_selection\"] | unique | if index(true)>-1 then true else false end",
                  "data.$":"$"
                },
                "ResultPath":"$.DelayTagResult",
                "Next":"choice.CheckDelayTagResult",
                "Catch":[
                  {
                    "ErrorEquals":[
                      "States.ALL"
                    ],
                    "ResultPath":"$.error_Details",
                    "Next":"action.PostError"
                  }
                ]
              },
              "choice.CheckDelayTagResult":{
                "Type":"Choice",
                "Comment":"Decision to execute 'Webhook Delay' job or to skip it.",
                "Choices":[
                  {
                    "Variable":"$.DelayTagResult",
                    "BooleanEquals":true,
                    "Next":"wait.TenSeconds2"
                  }
                ],
                "Default":"action.GetDayOfWeek"
              },
              "wait.TenSeconds2":{
                "Type":"Wait",
                "Seconds":10,
                "Comment":"Wait 10 Seconds before executing the next Action.",
                "Next":"action.AddTagsWebhookDelay"
              },
              "action.AddTagsWebhookDelay":{
                "Type":"Action",
                "ActionName":"zis:{{ticket_created}}:action:add_tags_webhook_delay",
                "Comment":"Add Tag 'tkt_nt_zis_webhook_delay_tag'",
                "Parameters":{
                  "ticket_id.$":"$.input.ticket_event.ticket.id"
                },
                "Next":"action.GetDayOfWeek",
                "Catch":[
                  {
                    "ErrorEquals":[
                      "States.ALL"
                    ],
                    "ResultPath":"$.error_Details",
                    "Next":"action.PostError"
                  }
                ]
              },
              "action.GetDayOfWeek":{
                "Type":"Action",
                "ActionName":"zis:common:transform:Jq",
                "Comment":"Extract the day of the week as a string from the ticket's creation timestamp.",
                "Parameters":{
                  "expr":".input.ticket_event.ticket.created_at | strptime(\"%Y-%m-%dT%H:%M:%S%z\") | strftime(\"%A\")",
                  "data.$":"$"
                },
                "ResultPath":"$.DayOfWeekResult",
                "Next":"choice.CheckDayOfWeek",
                "Catch":[
                  {
                    "ErrorEquals":[
                      "States.ALL"
                    ],
                    "ResultPath":"$.error_Details",
                    "Next":"action.PostError"
                  }
                ]
              },
              "choice.CheckDayOfWeek":{
                "Type":"Choice",
                "Comment":"Check if the day of the week is Monday, Tuesday, or Wednesday.",
                "Choices":[
                  {
                    "Or":[
                      {
                        "Variable":"$.DayOfWeekResult",
                        "StringEquals":"Monday"
                      },
                      {
                        "Variable":"$.DayOfWeekResult",
                        "StringEquals":"Tuesday"
                      },
                      {
                        "Variable":"$.DayOfWeekResult",
                        "StringEquals":"Wednesday"
                      }
                    ],
                    "Next":"action.KunAdminReminderDelayTag"
                  }
                ],
                "Default":"action.CheckAutoReplyTags"
              },
              "action.KunAdminReminderDelayTag":{
                "Type":"Action",
                "ActionName":"zis:common:transform:Jq",
                "Comment":"Check if Ticket tags contain 'kununu_admin_ticket' and 'mtw_3day_reminder'",
                "Parameters":{
                  "expr":"(.input.ticket_event.ticket.tags | contains([\"kununu_admin_ticket\", \"mtw_3day_reminder\"]))",
                  "data.$":"$"
                },
                "ResultPath":"$.KunAdminReminderTagResult",
                "Next":"choice.KunAdminReminderDelayTagResult",
                "Catch":[
                  {
                    "ErrorEquals":[
                      "States.ALL"
                    ],
                    "ResultPath":"$.error_Details",
                    "Next":"action.PostError"
                  }
                ]
              },
              "choice.KunAdminReminderDelayTagResult":{
                "Type":"Choice",
                "Comment":"Decision to execute 'Kununu Reminder Selection' job or to skip it.",
                "Choices":[
                  {
                    "Variable":"$.KunAdminReminderTagResult",
                    "BooleanEquals":true,
                    "Next":"wait.TenSeconds3"
                  }
                ],
                "Default":"action.CheckAutoReplyTags"
              },
              "wait.TenSeconds3":{
                "Type":"Wait",
                "Seconds":10,
                "Comment":"Wait 10 seconds before executing the next action.",
                "Next":"action.AddTagsKunAdminReminder"
              },
              "action.AddTagsKunAdminReminder":{
                "Type":"Action",
                "ActionName":"zis:{{ticket_created}}:action:add_tags_kunAdmin_reminder",
                "Comment":"Add Tag for the day of the week.",
                "Parameters":{
                  "ticket_id.$":"$.input.ticket_event.ticket.id",
                  "day_of_week.$":"$.DayOfWeekResult"
                },
                "Next":"action.CheckAutoReplyTags",
                "Catch":[
                  {
                    "ErrorEquals":[
                      "States.ALL"
                    ],
                    "ResultPath":"$.error_Details",
                    "Next":"action.PostError"
                  }
                ]
              },
              "action.CheckAutoReplyTags":{
                "Type":"Action",
                "ActionName":"zis:common:transform:Jq",
                "Comment":"Check if Ticket tags contain a valid Auto Reply tag",
                "Parameters":{
                  "expr":".input.ticket_event.ticket.tags | any(index(\"tkt_ch_kununu_ag_comment_function_api\", \"tkt_ch_kununu_ag_comment_function_api\"))",
                  "data.$":"$"
                },
                "ResultPath":"$.AutoReplyTagResult",
                "Next":"choice.CheckAutoReplyTagResult",
                "Catch":[
                  {
                    "ErrorEquals":[
                      "States.ALL"
                    ],
                    "ResultPath":"$.error_Details",
                    "Next":"action.PostError"
                  }
                ]
              },
              "choice.CheckAutoReplyTagResult":{
                "Type":"Choice",
                "Comment":"Decision to execute 'Auto Reply' job or to skip it.",
                "Choices":[
                  {
                    "Variable":"$.AutoReplyTagResult",
                    "BooleanEquals":true,
                    "Next":"wait.TenSeconds5"
                  }
                ],
                "Default":"succeed.NoAutoReplyTag"
              },
              "wait.TenSeconds5":{
                "Type":"Wait",
                "Seconds":10,
                "Comment":"Wait 10 Seconds before executing the next Action.",
                "Next":"action.AddTagsAutoReply"
              },
              "action.AddTagsAutoReply":{
                "Type":"Action",
                "ActionName":"zis:{{ticket_created}}:action:add_tags_auto_reply",
                "Comment":"Add Tag 'tkt_nt_zis_auto_reply_tag'",
                "Parameters":{
                  "ticket_id.$":"$.input.ticket_event.ticket.id"
                },
                "Next":"succeed.FlowEnd",
                "Catch":[
                  {
                    "ErrorEquals":[
                      "States.ALL"
                    ],
                    "ResultPath":"$.error_Details",
                    "Next":"action.PostError"
                  }
                ]
              },
              "action.PostError":{
                "Type":"Action",
                "ActionName":"zis:{{ticket_created}}:action:post_error",
                "Comment":"Post Error to Monitor.",
                "Next":"fail.HandleError"
              },
              "succeed.FlowEnd":{
                "Type":"Succeed",
                "Comment":"Log",
                "Message":"✅ - Ticket ID: {{$.ticket_id}}; The workflow has been fully executed. Auto Reply: true"
              },
              "succeed.NoAutoReplyTag":{
                "Type":"Succeed",
                "Comment":"Log",
                "Message":"✅ - Ticket ID: {{$.ticket_id}}; The workflow has been fully executed. Auto Reply: false"
              },
              "fail.HandleError":{
                "Type":"Fail",
                "Error":"ActionExecutionFailed",
                "Cause":"❌ - Ticket ID: {{$.ticket_id}}; Error in action: {{$.error_Details}}"
              }
            }
          }
        }
      },
      "action.AddTagsWebhookDelay":{
        "type":"ZIS::Action::Http",
        "properties":{
          "name":"add_tags_webhook_delay",
          "definition":{
            "method":"PUT",
            "path":"/api/v2/tickets/{{$.ticket_id}}/tags",
            "requestBody":{
              "tags":[
                "tkt_nt_zis_webhook_delay_tag"
              ]
            },
            "connectionName":"zendesk"
          }
        }
      },
      "action.AddTagsAutoReply":{
        "type":"ZIS::Action::Http",
        "properties":{
          "name":"add_tags_auto_reply",
          "definition":{
            "method":"PUT",
            "path":"/api/v2/tickets/{{$.ticket_id}}/tags",
            "requestBody":{
              "tags":[
                "tkt_nt_zis_auto_reply_tag"
              ]
            },
            "connectionName":"zendesk"
          }
        }
      },
      "action.AddTagsKunAdminReminder":{
        "type":"ZIS::Action::Http",
        "properties":{
          "name":"add_tags_kunAdmin_reminder",
          "definition":{
            "method":"PUT",
            "path":"/api/v2/tickets/{{$.ticket_id}}/tags",
            "requestBody":{
              "tags":[
                "mtw_3day_reminder_{{$.day_of_week}}"
              ]
            },
            "connectionName":"zendesk"
          }
        }
      },
      "action.FetchTicket":{
        "type":"ZIS::Action::Http",
        "properties":{
          "name":"fetch_ticket",
          "definition":{
            "method":"GET",
            "path":"/api/v2/tickets/{{$.ticket_id}}.json",
            "connectionName":"zendesk"
          }
        }
      },
      "action.RelatedFetchTicket":{
        "type":"ZIS::Action::Http",
        "properties":{
          "name":"fetch_related_ticket",
          "definition":{
            "method":"GET",
            "path":"/api/v2/tickets/{{$.related_ticket_id}}.json",
            "connectionName":"zendesk"
          }
        }
      },
      "action.DeleteTicket":{
        "type":"ZIS::Action::Http",
        "properties":{
          "name":"delete_ticket",
          "definition":{
            "method":"DELETE",
            "path":"/api/v2/tickets/{{$.ticket_id}}",
            "requestBody":{

            },
            "connectionName":"zendesk"
          }
        }
      },
      "action.ShowUser":{
        "type":"ZIS::Action::Http",
        "properties":{
          "name":"show_user",
          "definition":{
            "method":"GET",
            "path":"/api/v2/users/{{$.requester_id}}.json",
            "connectionName":"zendesk"
          }
        }
      },
      "action.MarkAsSpam":{
        "type":"ZIS::Action::Http",
        "properties":{
          "name":"mark_as_spam",
          "definition":{
            "method":"PUT",
            "path":"/api/v2/tickets/{{$.ticket_id}}/mark_as_spam",
            "requestBody":{

            },
            "connectionName":"zendesk"
          }
        }
      },
      "action.DeleteUser":{
        "type":"ZIS::Action::Http",
        "properties":{
          "name":"delete_user",
          "definition":{
            "method":"DELETE",
            "path":"/api/v2/users/{{$.requester_id}}",
            "requestBody":{

            },
            "connectionName":"zendesk"
          }
        }
      },
      "action.PermanentDeleteUser":{
        "type":"ZIS::Action::Http",
        "properties":{
          "name":"permanent_delete_user",
          "definition":{
            "method":"DELETE",
            "path":"/api/v2/deleted_users/{{$.requester_id}}",
            "requestBody":{

            },
            "connectionName":"zendesk"
          }
        }
      },
      "action.PostError":{
        "type":"ZIS::Action::Http",
        "properties":{
          "name":"post_error",
          "definition":{
            "method":"POST",
            "url":"{{https_endpoint_error_handling}}",
            "requestBody":{
              "error":{
                "platform":"Zendesk Integration Service",
                "instance":"PRODUCTION",
                "flowName":"AWS ZIS ticket.TicketCreated",
                "flowStatus":"failed",
                "timeStamp":"",
                "flowLink":""
              }
            }
          }
        }
      }
    }
  }
