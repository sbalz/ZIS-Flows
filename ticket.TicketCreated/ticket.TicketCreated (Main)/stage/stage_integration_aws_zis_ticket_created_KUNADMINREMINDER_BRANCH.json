{
    "zis_template_version": "2019-10-14",
    "name": "AWS ZIS ticket.TicketCreated",
    "description": "Listens to ZIS event 'ticket.TicketCreated' and starts an Amazon States Language workflow und can contain conditional branches, data transformations and API calls.",
    "resources": {
        "JobSpec": {
            "type": "ZIS::JobSpec",
            "properties": {
                "name": "TicketCreatedJobSpec",
                "event_source": "support",
                "event_type": "ticket.TicketCreated",
                "flow_name": "zis:{{ticket_created}}:flow:TicketCreatedFlow"
            }
        },
        "Flow": {
            "type": "ZIS::Flow",
            "properties": {
                "name": "TicketCreatedFlow",
                "definition": {
                    "StartAt": "action.CheckSkipZISTag",
                    "States": {
                        "action.CheckSkipZISTag": {
                            "Type": "Action",
                            "ActionName": "zis:common:transform:Jq",
                            "Comment": "Check if Ticket tags contain 'skip_ticket_created_zis'",
                            "Parameters": {
                                "expr": "[.input.ticket_event.ticket.tags[] == \"skip_ticket_created_zis\"] | unique | if index(true)>-1 then true else false end",
                                "data.$": "$"
                            },
                            "ResultPath": "$.SkipJobTagResult",
                            "Next": "choice.CheckSkipZISTagResult"
                        },
                        "choice.CheckSkipZISTagResult": {
                            "Type": "Choice",
                            "Comment": "Decision to execute or to skip this ZIS Flow.",
                            "Choices": [
                                {
                                    "Variable": "$.SkipJobTagResult",
                                    "BooleanEquals": true,
                                    "Next": "succeed.SkipZIS"
                                }
                            ],
                            "Default": "wait.OneSecond1"
                        },
                        "succeed.SkipZIS": {
                            "Type": "Succeed",
                            "Comment": "Log",
                            "Message": "✅ - Ticket ID: {{$.input.ticket_event.ticket.id}}; The workflow was skipped."
                        },
                        "wait.OneSecond1": {
                            "Type": "Wait",
                            "Seconds": 1,
                            "Comment": "Wait 1 Second before executing the next Action.",
                            "Next": "action.CheckDeletionTag"
                        },
                        "action.CheckDeletionTag": {
                            "Type": "Action",
                            "ActionName": "zis:common:transform:Jq",
                            "Comment": "Check if Ticket tags contain 'is_api_deleted'",
                            "Parameters": {
                                "expr": "[.input.ticket_event.ticket.tags[] == \"is_api_deleted\"] | unique | if index(true)>-1 then true else false end",
                                "data.$": "$"
                            },
                            "ResultPath": "$.DeletionTagResult",
                            "Next": "choice.CheckDeletionTagResult"
                        },
                        "choice.CheckDeletionTagResult": {
                            "Type": "Choice",
                            "Comment": "Decision to execute 'Delete Ticket' job or to skip it.",
                            "Choices": [
                                {
                                    "Variable": "$.DeletionTagResult",
                                    "BooleanEquals": true,
                                    "Next": "action.DeleteTicket"
                                }
                            ],
                            "Default": "wait.OneSecond2"
                        },
                        "action.DeleteTicket": {
                            "Type": "Action",
                            "ActionName": "zis:{{ticket_created}}:action:delete_ticket",
                            "Comment": "Delete Ticket.",
                            "Parameters": {
                                "ticket_id.$": "$.input.ticket_event.ticket.id"
                            },
                            "Next": "succeed.DeleteTicket"
                        },
                        "succeed.DeleteTicket": {
                            "Type": "Succeed",
                            "Comment": "Log",
                            "Message": "✅ - Ticket ID: {{$.input.ticket_event.ticket.id}}; The ticket was identified as superfluous and therefore deleted."
                        },
                        "wait.OneSecond2": {
                            "Type": "Wait",
                            "Seconds": 1,
                            "Comment": "Wait 1 Second before executing the next Action.",
                            "Next": "action.ShowUser"
                        },
                        "action.ShowUser": {
                            "Type": "Action",
                            "ActionName": "zis:{{ticket_created}}:action:show_user",
                            "Comment": "Get Ticket Requester ID.",
                            "Parameters": {
                                "requester_id.$": "$.input.ticket_event.ticket.requester_id"
                            },
                            "ResultPath": "$.fetched_requester",
                            "Next": "action.CheckRequesterEmail"
                        },
                        "action.CheckRequesterEmail": {
                            "Type": "Action",
                            "ActionName": "zis:common:transform:Jq",
                            "Comment": "Check if the Requester's Email contains a Domain defined as Spam.",
                            "Parameters": {
                                "expr": "[.user.email | contains(\"@qq.com\", \"@bccto.cc\", \"@126.com\", \"@tbol.com\")] | unique | if index(true)>-1 then true else false end",
                                "data.$": "$.fetched_requester"
                            },
                            "ResultPath": "$.SpamRequesterMailPresent",
                            "Next": "choice.CheckRequesterEmailResult"
                        },
                        "choice.CheckRequesterEmailResult": {
                            "Type": "Choice",
                            "Comment": "Decision to execute 'Mark as Spam' job or to skip it.",
                            "Choices": [
                                {
                                    "Variable": "$.SpamRequesterMailPresent",
                                    "BooleanEquals": true,
                                    "Next": "action.MarkAsSpam"
                                }
                            ],
                            "Default": "action.CheckDelayTag"
                        },
                        "action.MarkAsSpam": {
                            "Type": "Action",
                            "ActionName": "zis:{{ticket_created}}:action:mark_as_spam",
                            "Comment": "Mark Ticket as Spam and Suspend Requester.",
                            "Parameters": {
                                "ticket_id.$": "$.input.ticket_event.ticket.id"
                            },
                            "Next": "wait.TenSeconds1"
                        },
                        "wait.TenSeconds1": {
                            "Type": "Wait",
                            "Seconds": 10,
                            "Comment": "Wait 10 Seconds before executing the next Action.",
                            "Next": "action.DeleteUser"
                        },
                        "action.DeleteUser": {
                            "Type": "Action",
                            "ActionName": "zis:{{ticket_created}}:action:delete_user",
                            "Comment": "Delete Requester.",
                            "Parameters": {
                                "requester_id.$": "$.input.ticket_event.ticket.requester_id"
                            },
                            "Next": "wait.TwentySeconds1"
                        },
                        "wait.TwentySeconds1": {
                            "Type": "Wait",
                            "Seconds": 20,
                            "Comment": "Wait 20 Seconds before executing the next Action.",
                            "Next": "action.PermanentDeleteUser"
                        },
                        "action.PermanentDeleteUser": {
                            "Type": "Action",
                            "ActionName": "zis:{{ticket_created}}:action:permanent_delete_user",
                            "Comment": "Permanent delete Requester.",
                            "Parameters": {
                                "requester_id.$": "$.input.ticket_event.ticket.requester_id"
                            },
                            "Next": "succeed.MarkedAsSpam"
                        },
                        "succeed.MarkedAsSpam": {
                            "Type": "Succeed",
                            "Comment": "Log",
                            "Message": "✅ - Ticket ID: {{$.input.ticket_event.ticket.id}}; The ticket has been identified and marked as spam. The requester has been permanently deleted."
                        },
                        "action.CheckDelayTag": {
                            "Type": "Action",
                            "ActionName": "zis:common:transform:Jq",
                            "Comment": "Check if Ticket tags contain 'zis_webhook_delay_selection'",
                            "Parameters": {
                                "expr": "[.input.ticket_event.ticket.tags[] == \"zis_webhook_delay_selection\"] | unique | if index(true)>-1 then true else false end",
                                "data.$": "$"
                            },
                            "ResultPath": "$.DelayTagResult",
                            "Next": "choice.CheckDelayTagResult"
                        },
                        "choice.CheckDelayTagResult": {
                            "Type": "Choice",
                            "Comment": "Decision to execute 'Webhook Delay' job or to skip it.",
                            "Choices": [
                                {
                                    "Variable": "$.DelayTagResult",
                                    "BooleanEquals": true,
                                    "Next": "wait.TenSeconds2"
                                }
                            ],
                            "Default": "action.GetDayOfWeek"
                        },
                        "wait.TenSeconds2": {
                            "Type": "Wait",
                            "Seconds": 10,
                            "Comment": "Wait 10 Seconds before executing the next Action.",
                            "Next": "action.AddTagsWebhookDelay"
                        },
                        "action.AddTagsWebhookDelay": {
                            "Type": "Action",
                            "ActionName": "zis:{{ticket_created}}:action:add_tags_webhook_delay",
                            "Comment": "Add Tag 'tkt_nt_zis_webhook_delay_tag'",
                            "Parameters": {
                                "ticket_id.$": "$.input.ticket_event.ticket.id"
                            },
                            "Next": "action.GetDayOfWeek"
                        },
                        "action.GetDayOfWeek": {
                            "Type": "Action",
                            "ActionName": "zis:common:transform:Jq",
                            "Comment": "Extract the day of the week as a string from the ticket's creation timestamp.",
                            "Parameters": {
                                "expr": ".input.ticket_event.ticket.created_at | strptime(\"%Y-%m-%dT%H:%M:%S%z\") | strftime(\"%A\")",
                                "data.$": "$"
                            },
                            "ResultPath": "$.DayOfWeekResult",
                            "Next": "choice.CheckDayOfWeek"
                        },
                        "choice.CheckDayOfWeek": {
                            "Type": "Choice",
                            "Comment": "Check if the day of the week is Monday, Tuesday, or Wednesday.",
                            "Choices": [
                                {
                                    "Or": [
                                        {
                                            "Variable": "$.DayOfWeekResult",
                                            "StringEquals": "Monday"
                                        },
                                        {
                                            "Variable": "$.DayOfWeekResult",
                                            "StringEquals": "Tuesday"
                                        },
                                        {
                                            "Variable": "$.DayOfWeekResult",
                                            "StringEquals": "Wednesday"
                                        }
                                    ],
                                    "Next": "action.KunAdminReminderDelayTag"
                                }
                            ],
                            "Default": "action.CheckEndUserFollowUp"
                        },
                        "action.KunAdminReminderDelayTag": {
                            "Type": "Action",
                            "ActionName": "zis:common:transform:Jq",
                            "Comment": "Check if Ticket tags contain 'kununu_admin_ticket' and 'mtw_3day_reminder'",
                            "Parameters": {
                                "expr": "(.input.ticket_event.ticket.tags | contains([\"kununu_admin_ticket\", \"mtw_3day_reminder\"]))",
                                "data.$": "$"
                            },
                            "ResultPath": "$.KunAdminReminderTagResult",
                            "Next": "choice.KunAdminReminderDelayTagResult"
                        },
                        "choice.KunAdminReminderDelayTagResult": {
                            "Type": "Choice",
                            "Comment": "Decision to execute 'Kununu Reminder Selection' job or to skip it.",
                            "Choices": [
                                {
                                    "Variable": "$.KunAdminReminderTagResult",
                                    "BooleanEquals": true,
                                    "Next": "wait.TenSeconds3"
                                }
                            ],
                            "Default": "action.CheckEndUserFollowUp"
                        },
                        "wait.TenSeconds3": {
                            "Type": "Wait",
                            "Seconds": 10,
                            "Comment": "Wait 10 seconds before executing the next action.",
                            "Next": "action.AddTagsKunAdminReminder"
                        },
                        "action.AddTagsKunAdminReminder": {
                            "Type": "Action",
                            "ActionName": "zis:{{ticket_created}}:action:add_tags_kunAdmin_reminder",
                            "Comment": "Add Tag for the day of the week.",
                            "Parameters": {
                                "ticket_id.$": "$.input.ticket_event.ticket.id",
                                "day_of_week.$": "$.DayOfWeekResult"
                            },
                            "Next": "action.CheckEndUserFollowUp"
                        },
                        "action.CheckEndUserFollowUp": {
                            "Type": "Action",
                            "ActionName": "zis:common:transform:Jq",
                            "Comment": "Check if Ticket tags contain 'tkt_created_by_enduser' & via follow up",
                            "Parameters": {
                                "expr": "(.input.ticket_event.ticket.tags | contains([\"tkt_created_by_enduser\", \"ind_follow_up_end\", \"is_follow_up\"])) | if . then true else false end",
                                "data.$": "$"
                            },
                            "ResultPath": "$.CheckEndUserFollowUpResult",
                            "Next": "choice.CheckEndUserFollowUpResult"
                        },
                        "choice.CheckEndUserFollowUpResult": {
                            "Type": "Choice",
                            "Comment": "Decision to execute 'Assignee' job or to skip it.",
                            "Choices": [
                                {
                                    "Variable": "$.CheckEndUserFollowUpResult",
                                    "BooleanEquals": true,
                                    "Next": "action.FetchTicket"
                                }
                            ],
                            "Default": "action.CheckAutoReplyTags"
                        },
                        "action.FetchTicket": {
                            "Type": "Action",
                            "ActionName": "zis:{{ticket_created}}:action:fetch_ticket",
                            "Comment": "Get this ticket data",
                            "Parameters": {
                                "ticket_id.$": "$.input.ticket_event.ticket.id"
                            },
                            "ResultPath": "$.FetchedTicketData",
                            "Next": "action.StoreRelatedTicketID"
                        },
                        "action.StoreRelatedTicketID": {
                            "Type": "Action",
                            "Comment": "Get related ticket ID",
                            "ActionName": "zis:common:transform:Jq",
                            "Parameters": {
                                "data.$": "$.FetchedTicketData",
                                "expr": ".ticket.via.source.from.ticket_id"
                            },
                            "ResultPath": "$.FetchedRelatedTicketID",
                            "Next": "action.FetchRelatedTicket"
                        },
                        "action.FetchRelatedTicket": {
                            "Type": "Action",
                            "ActionName": "zis:{{ticket_created}}:action:fetch_related_ticket",
                            "Comment": "Get related ticket data",
                            "Parameters": {
                                "related_ticket_id.$": "$.FetchedRelatedTicketID"
                            },
                            "ResultPath": "$.FetchedRelatedTicketData",
                            "Next": "action.StoreRelatedTicketAssignee"
                        },
                        "action.StoreRelatedTicketAssignee": {
                            "Type": "Action",
                            "Comment": "Get related ticket assignee ID",
                            "ActionName": "zis:common:transform:Jq",
                            "Parameters": {
                                "data.$": "$.FetchedRelatedTicketData",
                                "expr": ".ticket.assignee_id | if . == null then {{integrationUserID}} else . end"
                            },
                            "ResultPath": "$.FetchedRelatedTicketAssignee",
                            "Next": "wait.TenSeconds4"
                        },
                        "wait.TenSeconds4": {
                            "Type": "Wait",
                            "Seconds": 10,
                            "Comment": "Wait 10 Seconds before executing the next Action.",
                            "Next": "action.BulkUpdateTicket"
                        },
                        "action.BulkUpdateTicket": {
                            "Type": "Action",
                            "ActionName": "zis:{{ticket_created}}:action:bulk_update_ticket",
                            "Comment": "Update Ticket with related ticket data assignee ID.",
                            "Parameters": {
                                "ticket_id.$": "$.input.ticket_event.ticket.id",
                                "ticket_assignee.$": "$.FetchedRelatedTicketAssignee"
                            },
                            "Next": "action.CheckAutoReplyTags"
                        },
                        "action.CheckAutoReplyTags": {
                            "Type": "Action",
                            "ActionName": "zis:common:transform:Jq",
                            "Comment": "Check if Ticket tags contain a valid Auto Reply tag",
                            "Parameters": {
                                "expr": ".input.ticket_event.ticket.tags | any(index(\"tkt_ch_kununu_ag_comment_function_api\", \"tkt_ch_kununu_ag_comment_function_api\"))",
                                "data.$": "$"
                            },
                            "ResultPath": "$.AutoReplyTagResult",
                            "Next": "choice.CheckAutoReplyTagResult"
                        },
                        "choice.CheckAutoReplyTagResult": {
                            "Type": "Choice",
                            "Comment": "Decision to execute 'Auto Reply' job or to skip it.",
                            "Choices": [
                                {
                                    "Variable": "$.AutoReplyTagResult",
                                    "BooleanEquals": true,
                                    "Next": "wait.TenSeconds5"
                                }
                            ],
                            "Default": "succeed.NoAutoReplyTag"
                        },
                        "wait.TenSeconds5": {
                            "Type": "Wait",
                            "Seconds": 10,
                            "Comment": "Wait 10 Seconds before executing the next Action.",
                            "Next": "action.AddTagsAutoReply"
                        },
                        "action.AddTagsAutoReply": {
                            "Type": "Action",
                            "ActionName": "zis:{{ticket_created}}:action:add_tags_auto_reply",
                            "Comment": "Add Tag 'tkt_nt_zis_auto_reply_tag'",
                            "Parameters": {
                                "ticket_id.$": "$.input.ticket_event.ticket.id"
                            },
                            "Next": "succeed.FlowEnd"
                        },
                        "succeed.FlowEnd": {
                            "Type": "Succeed",
                            "Comment": "Log",
                            "Message": "✅ - Ticket ID: {{$.input.ticket_event.ticket.id}}; The workflow has been fully executed. Auto Reply: true"
                        },
                        "succeed.NoAutoReplyTag": {
                            "Type": "Succeed",
                            "Comment": "Log",
                            "Message": "✅ - Ticket ID: {{$.input.ticket_event.ticket.id}}; The workflow has been fully executed. Auto Reply: false"
                        }
                    }
                }
            }
        },
        "action.AddTagsWebhookDelay": {
            "type": "ZIS::Action::Http",
            "properties": {
                "name": "add_tags_webhook_delay",
                "definition": {
                    "method": "PUT",
                    "path": "/api/v2/tickets/{{$.ticket_id}}/tags",
                    "requestBody": {
                        "tags": ["tkt_nt_zis_webhook_delay_tag"]
                    },
                    "connectionName": "zendesk"
                }
            }
        },
        "action.AddTagsAutoReply": {
            "type": "ZIS::Action::Http",
            "properties": {
                "name": "add_tags_auto_reply",
                "definition": {
                    "method": "PUT",
                    "path": "/api/v2/tickets/{{$.ticket_id}}/tags",
                    "requestBody": {
                        "tags": ["tkt_nt_zis_auto_reply_tag"]
                    },
                    "connectionName": "zendesk"
                }
            }
        },
        "action.AddTagsKunAdminReminder": {
            "type": "ZIS::Action::Http",
            "properties": {
                "name": "add_tags_kunAdmin_reminder",
                "definition": {
                    "method": "PUT",
                    "path": "/api/v2/tickets/{{$.ticket_id}}/tags",
                    "requestBody": {
                        "tags": ["mtw_3day_reminder_{{$.day_of_week}}"]
                    },
                    "connectionName": "zendesk"
                }
            }
        },
        "action.FetchTicket": {
            "type": "ZIS::Action::Http",
            "properties": {
                "name": "fetch_ticket",
                "definition": {
                    "method": "GET",
                    "path": "/api/v2/tickets/{{$.ticket_id}}.json",
                    "connectionName": "zendesk"
                }
            }
        },
        "action.RelatedFetchTicket": {
            "type": "ZIS::Action::Http",
            "properties": {
                "name": "fetch_related_ticket",
                "definition": {
                    "method": "GET",
                    "path": "/api/v2/tickets/{{$.related_ticket_id}}.json",
                    "connectionName": "zendesk"
                }
            }
        },
        "action.BulkUpdateTicket": {
            "type": "ZIS::Action::Http",
            "properties": {
                "name": "bulk_update_ticket",
                "definition": {
                    "method": "PUT",
                    "path": "/api/v2/tickets/update_many.json?ids={{$.ticket_id}}",
                    "requestBody": {
                        "ticket": {
                            "assignee_id": "{{$.ticket_assignee}}"
                        }
                    },
                    "connectionName": "zendesk"
                }
            }
        },
        "action.DeleteTicket": {
            "type": "ZIS::Action::Http",
            "properties": {
                "name": "delete_ticket",
                "definition": {
                    "method": "DELETE",
                    "path": "/api/v2/tickets/{{$.ticket_id}}",
                    "requestBody": {},
                    "connectionName": "zendesk"
                }
            }
        },
        "action.ShowUser": {
            "type": "ZIS::Action::Http",
            "properties": {
                "name": "show_user",
                "definition": {
                    "method": "GET",
                    "path": "/api/v2/users/{{$.requester_id}}.json",
                    "connectionName": "zendesk"
                }
            }
        },
        "action.MarkAsSpam": {
            "type": "ZIS::Action::Http",
            "properties": {
                "name": "mark_as_spam",
                "definition": {
                    "method": "PUT",
                    "path": "/api/v2/tickets/{{$.ticket_id}}/mark_as_spam",
                    "requestBody": {},
                    "connectionName": "zendesk"
                }
            }
        },
        "action.DeleteUser": {
            "type": "ZIS::Action::Http",
            "properties": {
                "name": "delete_user",
                "definition": {
                    "method": "DELETE",
                    "path": "/api/v2/users/{{$.requester_id}}",
                    "requestBody": {},
                    "connectionName": "zendesk"
                }
            }
        },
        "action.PermanentDeleteUser": {
            "type": "ZIS::Action::Http",
            "properties": {
                "name": "permanent_delete_user",
                "definition": {
                    "method": "DELETE",
                    "path": "/api/v2/deleted_users/{{$.requester_id}}",
                    "requestBody": {},
                    "connectionName": "zendesk"
                }
            }
        },
        "action.PostWebhook": {
            "type": "ZIS::Action::Http",
            "properties": {
                "name": "post_webhook",
                "definition": {
                    "method": "POST",
                    "url": "{{https_endpoint_zis_testing}}",
                    "requestBody": "$.payload"
                }
            }
        }
    }
}
